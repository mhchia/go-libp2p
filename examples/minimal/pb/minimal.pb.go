// Code generated by protoc-gen-go. DO NOT EDIT.
// source: minimal.proto

/*
Package protocols_p2p is a generated protocol buffer package.

It is generated from these files:
	minimal.proto

It has these top-level messages:
	AddPeerRequest
	AddPeerResponse
	SendCollationRequest
	NotifyShardsRequest
*/
package protocols_p2p

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// a protocol define a set of reuqest and responses
type AddPeerRequest struct {
	// method specific data
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *AddPeerRequest) Reset()                    { *m = AddPeerRequest{} }
func (m *AddPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPeerRequest) ProtoMessage()               {}
func (*AddPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddPeerRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AddPeerResponse struct {
	// response specific data
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *AddPeerResponse) Reset()                    { *m = AddPeerResponse{} }
func (m *AddPeerResponse) String() string            { return proto.CompactTextString(m) }
func (*AddPeerResponse) ProtoMessage()               {}
func (*AddPeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddPeerResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SendCollationRequest struct {
	ShardID int64  `protobuf:"varint,1,opt,name=shardID" json:"shardID,omitempty"`
	Blobs   string `protobuf:"bytes,2,opt,name=blobs" json:"blobs,omitempty"`
}

func (m *SendCollationRequest) Reset()                    { *m = SendCollationRequest{} }
func (m *SendCollationRequest) String() string            { return proto.CompactTextString(m) }
func (*SendCollationRequest) ProtoMessage()               {}
func (*SendCollationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendCollationRequest) GetShardID() int64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *SendCollationRequest) GetBlobs() string {
	if m != nil {
		return m.Blobs
	}
	return ""
}

type NotifyShardsRequest struct {
	ShardIDs []int64 `protobuf:"varint,1,rep,packed,name=shardIDs" json:"shardIDs,omitempty"`
}

func (m *NotifyShardsRequest) Reset()                    { *m = NotifyShardsRequest{} }
func (m *NotifyShardsRequest) String() string            { return proto.CompactTextString(m) }
func (*NotifyShardsRequest) ProtoMessage()               {}
func (*NotifyShardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NotifyShardsRequest) GetShardIDs() []int64 {
	if m != nil {
		return m.ShardIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*AddPeerRequest)(nil), "protocols.p2p.AddPeerRequest")
	proto.RegisterType((*AddPeerResponse)(nil), "protocols.p2p.AddPeerResponse")
	proto.RegisterType((*SendCollationRequest)(nil), "protocols.p2p.SendCollationRequest")
	proto.RegisterType((*NotifyShardsRequest)(nil), "protocols.p2p.NotifyShardsRequest")
}

func init() { proto.RegisterFile("minimal.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xcd, 0xcc, 0xcb,
	0xcc, 0x4d, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x05, 0x53, 0xc9, 0xf9, 0x39,
	0xc5, 0x7a, 0x05, 0x46, 0x05, 0x4a, 0x5a, 0x5c, 0x7c, 0x8e, 0x29, 0x29, 0x01, 0xa9, 0xa9, 0x45,
	0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89,
	0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x92, 0x36, 0x17, 0x3f, 0x5c,
	0x6d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x48, 0x71, 0x71, 0x69, 0x72, 0x72, 0x6a, 0x71, 0x31,
	0x58, 0x31, 0x47, 0x10, 0x8c, 0xab, 0xe4, 0xc6, 0x25, 0x12, 0x9c, 0x9a, 0x97, 0xe2, 0x9c, 0x9f,
	0x93, 0x93, 0x58, 0x92, 0x99, 0x9f, 0x87, 0x64, 0x7c, 0x71, 0x46, 0x62, 0x51, 0x8a, 0xa7, 0x0b,
	0x58, 0x07, 0x73, 0x10, 0x8c, 0x2b, 0x24, 0xc2, 0xc5, 0x9a, 0x94, 0x93, 0x9f, 0x54, 0x2c, 0xc1,
	0x04, 0xb6, 0x16, 0xc2, 0x51, 0x32, 0xe4, 0x12, 0xf6, 0xcb, 0x2f, 0xc9, 0x4c, 0xab, 0x0c, 0x06,
	0x29, 0x2b, 0x86, 0x19, 0x23, 0xc5, 0xc5, 0x01, 0xd5, 0x07, 0xb2, 0x99, 0x59, 0x83, 0x39, 0x08,
	0xce, 0x4f, 0x62, 0x03, 0x7b, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x62, 0x29, 0xd1, 0x2c,
	0xfa, 0x00, 0x00, 0x00,
}
